Walky Protocol

Base exchange unit is in Line-Delimited JSON.

Each line should be an array.

The basic structure of the array would look something like this.

[ PayloadType:Integer, Payload:Primitive, MessageID:String, ...Arguments:Optional ]

This will be applied both to queries and responses.

The PayloadType:Integer will tell the receiving system what type of data is found
in the payload.

== PayloadType:Integer ==

< 0: Error conditions
0..9: Frequently used messages
>= 10: System related

Object Method Invocation: 0
> [ 0, ObjectID:HexString, Function:String, args:List, kwargs:Dict, MessageID:String ]
> Request an object method to be executed
> ObjectID: string identifying the object holding the function to execute
> Function: string name of the function to call
> args: (optional) array of normalized positional values to pass to the class method
> kwargs: (optional) dict of normalized values to pass to the class method
> MessageID: a string value that uniquely identifies the request. Useful for async libraries.

Response: 1
> [ 0, Payload:Structure, MessageID:String ]
> Is a response from a request
> Payload is any data structure that the remote code returns. The only magic will be found in strings.
> Look at the Payload format details below.

Object Deleted: 8
> Returned as confirmation that an object has been freed
> from the server's memory.

Object Method: 9
> Special return code for attribute query telling the requestor that the 
> result is an object method.
> No payload is required or provided in this case.

Event: 11
> Payload has information related to an subscribed event. Payload to be treated like a Distributed Object

System: 12
> Payload has system related information. Payload to be treated like a Distributed Object

Error: -1
> Payload has system related information. Payload to be treated like a Distributed Object

Error: -XXX
> System can also use HTTP error status codes (excepting the 200/300 series)

MessageID:String is just a unique string representation for the string. 

This makes it much easier for async requests to receive the response associated with them.

== Payload:Primitive ==

The payload can be of any of the following basic types:

* Dict
** { 'b': 'c' }

* List
** [ 1,23,4,"hi" ]

* Numeric
** 123

* String
** "hello"

* Boolean
** true

* None
** null

The only magic happens with strings. For any structure that contains
a string, additional processing will be required 

== String Encoding ==

JSON doesn't support things such as datetimes and python objects out of the box.

To do so, some additional encoding has to be done. For Walky, the character "!" 
at the begining of the string tells the parser to look closer.

The character following the "!" determines how the parser should treat the string.
If the subsequent string is another "!", so "!!etc", the system will simply
strip the first "!" and return the string.

If the second character is different, then data is converted into another type.

* Date
** "!d" + "YYYY-MM-DD"

* DateTime
** The datetime format should be in ISO 8601 format with offset
** Eg: 2015-04-03T21:19:11+00:00
** "!D" + "2015-04-03T21:19:11+00:00"

* Remote Object reference (AKA. Reference to remote's object):
** "!o" + reg_obj_id + "=" + json.dumps({metadata})
** When an object on the REMOTE is being REFERRED TO
** The metadata is optional, should be prefixed with = and be a dict

* Local Object reference (AKA. Reference to local's object):
** "!O" + reg_obj_id + "=" + json.dumps({metadata})
** When an object reference is being SENT to the remote
** The metadata is optional, should be prefixed with = and be a dict

* Function
** "!f" + reg_obj_id + "=" + json.dumps({metadata})
** The metadata is optional, should be prefixed with = and be a dict

